Intuition
The core idea is to segregate all non-zero elements from the zeroes in a given array without altering the non-zero elements' relative order. This process aims to push all zeros to the end of the array while keeping the algorithm's space complexity to a minimum by modifying the array in place.

Approach
Two-Pointer Method: Utilize two pointers, L (Left) and R (Right), to scan through the array. L is used to find zeroes that need to be moved, and R acts as a boundary of the non-zero elements, decreasing when a zero is identified at the end.
In-Place Swap: When a zero is found by L, it's removed and inserted before R, effectively pushing it towards the end within the boundary. This ensures that the insertion of zeros does not disrupt the relative order of the non-zero elements.
Boundary Adjustment: The R pointer is adjusted (decremented) each time a zero is moved to ensure the zeros accumulate at the end of the array, and the non-zero elements stay within the new boundary defined by R.
Complexity
Time complexity: The algorithm's time complexity is a bit complex due to the removal and insertion operations within the loop. Each pop and insert operation is O(n), making it less efficient, especially for large arrays, as these operations are executed within a while loop.
Space complexity: O(1) - The solution modifies the array in place without using any additional space proportional to the input array size, fulfilling the in-place requirement.
Code
class Solution:
    def moveZeroes(self, nums: List[int]) -> None:
        """
        Do not return anything, modify nums in-place instead.
        """
        L, R = 0, len(nums)-1

        while L <= R:
            while nums[R] == 0 and L<=R:
                R-=1
            
            while nums[L] == 0 and L <= R:
                temp = nums.pop(L)
                nums.insert(R, temp)
                R-=1
            else:
                L+=1
            
Description:
This solution to the "Move Zeroes" problem utilizes an intuitive two-pointer approach to segregate zeroes from non-zero elements within an integer array. By carefully moving zeroes to the end and adjusting the scanning boundary dynamically, the algorithm ensures that the array's non-zero elements retain their original relative order. While straightforward and in-place, this method's reliance on element removal and insertion operations introduces inefficiency, especially evident in larger datasets. Despite this, the solution stands out for its simplicity and the clear, logical progression of its steps, marking it as an insightful exercise in array manipulation and pointer utilization.
